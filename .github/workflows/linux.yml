name: O3DS linux
on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on tags starting with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify the tag for manual run'
        required: false
        
jobs:

  build:
    name: build
    runs-on: [ ubuntu-latest ]

    steps:
    - id: get_version
      uses: dhkatz/get-version-action@v3.0.0

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Get Tools
      run: sudo apt-get install -y cmake ninja-build libmbedtls-dev patchelf

    - name: NNG
      working-directory: thirdparty/nng
      run: |
        mkdir -p usr
        cmake -B build -G Ninja -DNNG_ENABLE_TLS=ON -DCMAKE_INSTALL_PREFIX=$RUNNER_TEMP/usr
        cmake --build build
        cmake --install build

    - name: CML
      working-directory: thirdparty/cml
      run: |
        cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX=$RUNNER_TEMP/usr
        cmake --build build
        cmake --install build        

    - name: CRC
      working-directory: thirdparty/crccpp
      run: |
        cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX=$RUNNER_TEMP/usr
        cmake --build build
        cmake --install build

    - name: FlatBuffers
      working-directory: thirdparty/flatbuffers
      run: |
        cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX=$RUNNER_TEMP/usr
        cmake --build build
        cmake --install build        

    - name: Open3DStream
      run: |
        cmake -B build -G Ninja -DVERSION_TAG=\"${{ steps.get_version.outputs.version-without-v }}\" -DNNG_ENABLE_TLS=ON -DCMAKE_PREFIX_PATH=$RUNNER_TEMP/usr -DCMAKE_INSTALL_PREFIX=out
        cmake --build build
        cmake --install build

    - name: Package Release
      run: |
        mkdir ./out/bin/lib
        cp -d /usr/lib/x86_64-linux-gnu/libmbed*.so* ./out/bin/lib/
        patchelf --set-rpath '$ORIGIN/lib' ./out/bin/Repeater
        tar -czvf o3ds.tgz -C out .

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false       

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: o3ds.tgz
        asset_name: o3ds_${{ steps.get_version.outputs.version-without-v }}.tgz
        asset_content_type: application/gzip        
